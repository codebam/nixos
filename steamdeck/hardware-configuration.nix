# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}:

{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
    ./disko.nix
  ];

  boot.initrd.availableKernelModules = [
    "nvme"
    "xhci_pci"
    "usbhid"
    "sdhci_pci"
  ];
  boot.initrd.kernelModules = [
    "nvme"
    "btrfs"
  ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ config.boot.kernelPackages.zenergy ];
  boot.kernelParams = [
    "drm.panic_screen=qr_code"
    "quiet"
  ];
  boot.kernel.sysctl."kernel.sysrq" = 1;

  preservation = {
    enable = true;
    preserveAt."/persistent" = {
      commonMountOptions = [
        "x-gvfs-hide"
      ];
      files = [
        {
          file = "/etc/machine-id";
          inInitrd = true;
        }
      ];
      directories = [
      	{directory="/etc/nixos"; user="codebam"; group="users";}
        "/var/log"
        "/var/lib/bluetooth"
        "/var/lib/nixos"
        "/var/lib/OpenRGB"
        "/var/lib/systemd/coredump"
        "/etc/NetworkManager/system-connections"
        "/var/lib/iwd"
        "/etc/ssh"
        {
          directory = "/var/lib/colord";
          user = "colord";
          group = "colord";
          mode = "0700";
        }
        {
          directory = "/var/lib/private/ollama";
          user = "nobody";
          group = "nogroup";
        }
        {
          directory = "/var/lib/private/open-webui";
          user = "nobody";
          group = "nogroup";
        }
        {
          directory = "/var/lib/acme";
          user = "acme";
          group = "nginx";
        }
      ];
      users = {
        root = {
          directories = [
            {
              directory = ".ssh";
              mode = "0700";
            }
          ];
        };
        codebam = {
          commonMountOptions = [
            "x-gvfs-hide"
          ];
          directories = [
            {
              directory = ".ssh";
              mode = "0700";
            }
            {
              directory = ".gnupg";
              mode = "0700";
            }
            {
              directory = ".nixops";
              mode = "0700";
            }
            {
              directory = ".local/share/keyrings";
              mode = "0700";
            }
            "Downloads"
            "Music"
            "Pictures"
            "Documents"
            "Videos"
            "Games"
            ".local/share/direnv"
            ".steam"
            ".local/share/Steam"
            ".librewolf"
            ".password-store"
            ".local/state/wireplumber"
            ".config/Element"
            ".config/discord"
            ".local/share/TelegramDesktop"
            ".config/YouTube Music"
            ".local/share/PrismLauncher"
            ".config/OpenRGB"
            ".config/heroic"
            ".config/kdeconnect"
            ".config/rpcs3"
          ];
        };
      };
    };
  };

  systemd.tmpfiles.settings.preservation = {
    "/home/codebam/.config".d = { user = "codebam"; group = "users"; mode = "0755"; };
    "/home/codebam/.local".d = { user = "codebam"; group = "users"; mode = "0755"; };
    "/home/codebam/.local/share".d = { user = "codebam"; group = "users"; mode = "0755"; };
    "/home/codebam/.local/state".d = { user = "codebam"; group = "users"; mode = "0755"; };
  };

  systemd.services.systemd-machine-id-commit = {
    unitConfig.ConditionPathIsMountPoint = [
      ""
      "/persistent/etc/machine-id"
    ];
    serviceConfig.ExecStart = [
      ""
      "systemd-machine-id-setup --commit --root /persistent"
    ];
  };

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlo1.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
